import streamlit as st
import os
from PIL import Image
import sys
from typing import List, Tuple
import time
import random
import pandas as pd
import numpy as np
import altair as alt
# Adicionar importa√ß√µes necess√°rias para a gera√ß√£o da paleta de cores
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

# Importa√ß√µes do m√≥dulo bin_packing
from bin_packing import (
    Item, Solution, first_fit_decreasing, verificar_viabilidade_inicial,
    load_instance_from_buffer, HybridMetaheuristic, executar_heuristica
)

# Adicionar o diret√≥rio raiz ao path para permitir importa√ß√µes absolutas
sys.path.append("/home/zerocopia/Projetos/occ-2024-2/b1")

# Importar as p√°ginas usando caminho absoluto
from app.pages import about, main_app, apresentacao
# Como ilp.py est√° no mesmo diret√≥rio que main.py, podemos importar diretamente
import ilp

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Meta-heur√≠stica para o Problema de Bin Packing",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carregando e aplicando o CSS personalizado
def load_css(css_file):
    import os
    # Obter o caminho absoluto do diret√≥rio atual do script
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # Construir o caminho completo para o arquivo CSS
    css_path = os.path.join(dir_path, css_file)
    with open(css_path, "r") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Fun√ß√£o para carregar logos
def load_logos():
    # Obter o caminho absoluto do diret√≥rio atual do script
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # Construir o caminho completo para o diret√≥rio de logos
    logos_path = os.path.join(dir_path, "..", "data", "logos")
    
    # Dicion√°rio para armazenar logos v√°lidos
    logos_dict = {}
    
    # Verificar se o diret√≥rio existe
    if os.path.exists(logos_path):
        # Tentar carregar cada logo
        for logo_file in ["ufal.png", "ic.png", "ppgi.png"]:
            logo_path = os.path.join(logos_path, logo_file)
            if os.path.exists(logo_path):
                try:
                    logo = Image.open(logo_path)
                    # Remover a extens√£o para usar como chave
                    logo_name = os.path.splitext(logo_file)[0]
                    logos_dict[logo_name] = logo
                except Exception as e:
                    print(f"Erro ao carregar logo {logo_file}: {str(e)}")
    
    # Retorna o dicion√°rio de logos v√°lidos
    return logos_dict

def verify_solution(solution: List[List[Tuple[int, float]]], items: List[float]) -> bool:
    """
    Verifica se a solu√ß√£o √© v√°lida, ou seja, se todos os itens est√£o alocados
    e se a capacidade dos bins n√£o √© excedida.
    
    Args:
        solution: A solu√ß√£o a ser verificada
        items: Lista de tamanhos dos itens
        
    Returns:
        True se a solu√ß√£o for v√°lida, False caso contr√°rio
    """
    # Verificar se todos os itens est√£o na solu√ß√£o
    solution_items = []
    for bin_items in solution:
        for idx, size in bin_items:
            solution_items.append((idx, size))
    
    if len(solution_items) != len(items):
        return False
    
    # Verificar se as capacidades dos bins n√£o s√£o excedidas
    for bin_items in solution:
        bin_total = sum(size for _, size in bin_items)
        if bin_total > 1.0 + 1e-10:  # Toler√¢ncia para erros de ponto flutuante
            return False
    
    return True

def main():
    # Carregar CSS
    load_css("styles/custom.css")
    
    # Adicionar suporte para LaTeX com MathJax
    st.markdown(r"""
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    """, unsafe_allow_html=True)
    
    # Esconder as informa√ß√µes n√£o desejadas e aplicar estilos personalizados
    hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    .stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {
        font-size:16px;
    }
    /* Remove a barra horizontal no topo */
    header {
        background-color: transparent !important;
        border-bottom: none !important;
    }
    /* Ajusta o t√≠tulo para ficar mais pr√≥ximo do topo */
    .block-container {
        padding-top: 1rem !important;
    }
    /* Deixa o t√≠tulo com estilo mais destacado */
    h1:first-of-type {
        margin-top: 0 !important;
        padding-top: 0 !important;
        font-size: 2.5rem !important;
        color: var(--primary-color) !important;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
    }
    /* Ocultar seletor de tema na barra superior */
    div[data-testid="stToolbar"] button[aria-label="View theme"] {
        display: none !important;
    }
    /* Remover qualquer barra de cores no topo */
    header::before, 
    body::before,
    .main::before,
    #root::before,
    [data-testid="stAppViewContainer"]::before,
    [data-testid="stHeader"]::before {
        content: none !important;
        background: none !important;
        display: none !important;
    }
    </style>
    """
    st.markdown(hide_streamlit_style, unsafe_allow_html=True)
    
    # Sidebar
    st.sidebar.title("Navega√ß√£o")
    
    # Logos na sidebar
    logos = load_logos()
    if logos:  # Verifica se h√° logos v√°lidos antes de tentar exibi-los
        # Primeiro exibimos o logo da UFAL em tamanho completo
        if 'ufal' in logos:
            st.sidebar.image(logos['ufal'], use_container_width=True, caption=None)
        
        # Em seguida, exibimos os logos IC e PPGI lado a lado
        col1, col2 = st.sidebar.columns(2)
        if 'ic' in logos:
            col1.image(logos['ic'], use_container_width=True, caption=None)
        if 'ppgi' in logos:
            col2.image(logos['ppgi'], use_container_width=True, caption=None)
    
    # Usando abas principais em vez de radio buttons
    tabs_main = st.tabs(["Apresenta√ß√£o", "Heur√≠sticas", "PLI", "Sobre"])
    
    with tabs_main[0]:  # Aba Apresenta√ß√£o (era Introdu√ß√£o)
        apresentacao.app()
    
    ###################################
    # Aba Heur√≠sticas - Solu√ß√£o
    with tabs_main[1]:  # Aba Heur√≠sticas
        st.title("Heur√≠sticas para Bin Packing")
        # Sub-abas dentro da aba Heur√≠sticas
        subtabs_heuristica = st.tabs(["Apresenta√ß√£o", "Solu√ß√£o"])
        
        with subtabs_heuristica[0]:  # Sub-aba Apresenta√ß√£o
            st.markdown(r"""
            # Meta-heur√≠sticas para o Problema de Bin Packing

            ## Fundamenta√ß√£o Te√≥rica
            
            O problema de Bin Packing (BPP) √© um problema de otimiza√ß√£o combinat√≥ria classificado como **NP-dif√≠cil no sentido forte**. 
            Formalmente, o problema pode ser definido como:

            Dado um conjunto de $n$ itens, cada um com um tamanho $s_i \in (0, 1]$, e bins (recipientes) id√™nticos de capacidade 1,
            o objetivo √© empacotar todos os itens utilizando o menor n√∫mero poss√≠vel de bins, garantindo que a soma dos tamanhos 
            dos itens em cada bin n√£o exceda a capacidade.

            ### Formula√ß√£o Matem√°tica

            O BPP pode ser formulado como um problema de Programa√ß√£o Linear Inteira:

            $$\min \sum_{j=1}^{m} y_j$$

            Sujeito a:
            
            $$\sum_{j=1}^{m} x_{ij} = 1, \quad \forall i \in \{1, 2, ..., n\}$$
            
            $$\sum_{i=1}^{n} s_i x_{ij} \leq y_j, \quad \forall j \in \{1, 2, ..., m\}$$
            
            $$x_{ij} \in \{0, 1\}, \quad \forall i \in \{1, 2, ..., n\}, \forall j \in \{1, 2, ..., m\}$$
            
            $$y_j \in \{0, 1\}, \quad \forall j \in \{1, 2, ..., m\}$$

            Onde:
            - $y_j = 1$ se o bin $j$ for utilizado, 0 caso contr√°rio
            - $x_{ij} = 1$ se o item $i$ for alocado ao bin $j$, 0 caso contr√°rio
            - $s_i$ √© o tamanho do item $i$
            - $m$ √© um limite superior para o n√∫mero de bins (geralmente $m = n$)

            ## Estado da Arte em Heur√≠sticas para BPP

            Devido √† natureza NP-dif√≠cil do problema, v√°rias heur√≠sticas foram desenvolvidas para encontrar 
            solu√ß√µes aproximadas em tempo computacional razo√°vel.
            """)
            
            # Dividindo em colunas para organizar melhor o conte√∫do
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(r"""
                ### Heur√≠sticas Construtivas Cl√°ssicas
                
                1. **First Fit (FF)**
                   - Coloca cada item no primeiro bin onde ele cabe
                   - Complexidade: $O(n \log n)$
                   
                2. **Best Fit (BF)**
                   - Coloca cada item no bin mais cheio onde ele ainda cabe
                   - Complexidade: $O(n \log n)$
                   
                3. **First Fit Decreasing (FFD)**
                   - Ordena os itens em ordem decrescente de tamanho
                   - Aplica First Fit √† lista ordenada
                   - Garantia te√≥rica: $FFD(I) \leq \frac{11}{9} OPT(I) + 1$
                   
                4. **Best Fit Decreasing (BFD)**
                   - Ordena os itens em ordem decrescente de tamanho
                   - Aplica Best Fit √† lista ordenada
                   - Desempenho similar ao FFD na pr√°tica
                """)
                
            with col2:
                st.markdown(r"""
                ### Meta-heur√≠sticas Avan√ßadas
                
                1. **Busca Local**
                   - Explora o espa√ßo de solu√ß√µes atrav√©s de pequenas modifica√ß√µes
                   - Estruturas de vizinhan√ßa: movimentos de itens entre bins
                   
                2. **Simulated Annealing (SA)**
                   - Inspirado no processo f√≠sico de recozimento de metais
                   - Aceita solu√ß√µes piores com probabilidade controlada para escapar de √≥timos locais
                   - Probabilidade de aceita√ß√£o: $P = e^{-\Delta/T}$
                   
                3. **Iterated Local Search (ILS)**
                   - Aplica perturba√ß√µes quando a busca local estagna
                   - Permite explorar diferentes regi√µes do espa√ßo de busca
                   
                4. **Algoritmos Gen√©ticos e Evolutivos**
                   - Utilizam operadores inspirados na evolu√ß√£o natural
                   - Crossover, muta√ß√£o e sele√ß√£o para evolu√ß√£o da popula√ß√£o
                """)
            
            st.markdown(r"""
            ## Nossa Abordagem: Meta-heur√≠stica H√≠brida
            
            Implementamos uma meta-heur√≠stica h√≠brida que combina elementos de diferentes abordagens para obter um algoritmo 
            mais robusto e eficiente:

            ### Componentes da Meta-heur√≠stica
            
            1. **Inicializa√ß√£o**
               - Solu√ß√£o inicial gerada com First Fit Decreasing (FFD)
               
            2. **Busca Local**
               - Explora√ß√£o sistem√°tica da vizinhan√ßa atrav√©s de movimentos de itens entre bins
               - Dois tipos de estrat√©gia: Best Improvement e First Improvement
               
            3. **Mecanismos para Escapar de √ìtimos Locais**
               - **Simulated Annealing**: Aceita solu√ß√µes piores com probabilidade $P = e^{-\Delta/T}$
               - **Perturba√ß√µes Inteligentes**: Quatro tipos de perturba√ß√µes com intensidade adaptativa
               - **Estrat√©gia de Rein√≠cio**: Quando n√£o h√° progresso ap√≥s v√°rias itera√ß√µes
            """)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(r"""
                ### Tipos de Perturba√ß√£o Implementados
                
                1. **Move**
                   - Move um item aleat√≥rio de um bin para outro
                   - Perturba√ß√£o de baixa intensidade
                   
                2. **Swap**
                   - Troca itens entre dois bins diferentes
                   - Mant√©m o n√∫mero de bins constante
                   
                3. **Redistribute**
                   - Redistribui todos os itens de um bin para outros bins
                   - Potencial para reduzir o n√∫mero total de bins
                   
                4. **Merge-Split**
                   - Combina dois bins e redistribui os itens otimamente
                   - Perturba√ß√£o de alta intensidade que pode levar a reorganiza√ß√µes significativas
                """)
                
            with col2:
                st.markdown(r"""
                ### Esquema de Resfriamento (SA)
                
                A temperatura do Simulated Annealing √© controlada pela f√≥rmula:
                
                $$T_{k+1} = \alpha \times T_k$$
                
                Onde:
                - $T_k$ √© a temperatura na itera√ß√£o $k$
                - $\alpha$ √© a taxa de resfriamento (0.95 em nossa implementa√ß√£o)
                - Temperatura inicial $T_0 = 10.0$
                - Temperatura m√≠nima $T_{min} = 0.01$
                
                A probabilidade de aceitar uma solu√ß√£o pior √©:
                
                $$P(aceitar) = e^{-\Delta/T}$$
                
                Onde $\Delta$ √© a diferen√ßa entre a nova solu√ß√£o e a atual.
                """)
                
            st.image("https://www.mecs-press.org/ijieeb/ijieeb-v4-n2/IJIEEB-V4-N2-2_files/image002.jpg", 
                 caption="Exemplo de empacotamento de itens em bins", width=500)
            
            st.markdown(r"""
            ## Compara√ß√£o Te√≥rica de Desempenho

            Para inst√¢ncias com $n$ itens, as complexidades te√≥ricas s√£o:
            
            | Algoritmo | Complexidade | Raz√£o de Aproxima√ß√£o |
            |-----------|-------------|---------------------|
            | First Fit | $O(n \log n)$ | $FF(I) \leq 1.7 \times OPT(I) + 0.7$ |
            | Best Fit | $O(n \log n)$ | $BF(I) \leq 1.7 \times OPT(I) + 0.7$ |
            | First Fit Decreasing | $O(n \log n)$ | $FFD(I) \leq \frac{11}{9} \times OPT(I) + 1$ |
            | Nossa Meta-heur√≠stica | Depende do tempo limite | N√£o h√° garantia te√≥rica, mas empiricamente obt√©m solu√ß√µes pr√≥ximas do √≥timo |

            A abordagem h√≠brida implementada consegue escapar de √≥timos locais e explorar eficientemente o espa√ßo de busca, 
            resultando em solu√ß√µes de alta qualidade para o problema de Bin Packing.
            
            ## Refer√™ncias
            
            1. Martello, S., & Toth, P. (1990). Knapsack problems: algorithms and computer implementations. John Wiley & Sons.
            
            2. Coffman Jr, E. G., Csirik, J., Galambos, G., Martello, S., & Vigo, D. (2013). Bin packing approximation algorithms: survey and classification. Handbook of combinatorial optimization, 455-531.
            
            3. Louren√ßo, H. R., Martin, O. C., & St√ºtzle, T. (2003). Iterated local search. Handbook of metaheuristics, 320-353.
            
            4. Kirkpatrick, S., Gelatt, C. D., & Vecchi, M. P. (1983). Optimization by simulated annealing. Science, 220(4598), 671-680.
            """)
            
            main_app.app()

    with subtabs_heuristica[1]:  # Sub-aba Solu√ß√£o
        st.header("Meta-heur√≠stica de Solu√ß√£o √önica para Bin Packing")
        st.markdown("""
        Esta implementa√ß√£o resolve o problema de Bin Packing utilizando uma meta-heur√≠stica baseada em busca local.
        Voc√™ pode carregar um arquivo com inst√¢ncias do problema e definir um tempo limite para a execu√ß√£o.

        ### Formato do arquivo de entrada:
        - Cada linha cont√©m um n√∫mero entre 0 e 1, representando o tamanho de um item.
        - Exemplo: 0.42, 0.25, 0.15, 0.31, 0.12, 0.5, 0.18
        """)

        # Interface para upload de arquivo e configura√ß√£o
        col1, col2, col3 = st.columns([2, 1, 1])

        with col1:
            uploaded_file = st.file_uploader("Carregar arquivo de inst√¢ncia", type=["txt", "csv"])
            
        with col2:
            time_limit = st.number_input("Tempo limite (segundos)", min_value=1, value=10)
            
        with col3:
            max_bins = st.number_input("N√∫mero m√°ximo de bins", min_value=1, value=100, 
                                    help="Define o n√∫mero m√°ximo de bins dispon√≠veis. O algoritmo tentar√° usar o m√≠nimo poss√≠vel.")

        def generate_color_palette(num_items):
            """Gera uma paleta de cores para os itens"""
            # Usar uma combina√ß√£o de paletas coloridas para ter mais cores distintas
            base_colors = list(plt.cm.tab20.colors) + list(plt.cm.tab20b.colors) + list(plt.cm.tab20c.colors)
            
            if num_items <= len(base_colors):
                colors = base_colors[:num_items]
            else:
                # Se precisar de mais cores, gerar aleatoriamente
                colors = base_colors.copy()
                needed = num_items - len(colors)
                for _ in range(needed):
                    colors.append((random.random(), random.random(), random.random()))
            
            # Converter para formato hexadecimal para uso no Altair
            hex_colors = [mcolors.rgb2hex(color[:3]) for color in colors]
            return hex_colors

        def create_bins_visualization(solution, color_palette):
            """Cria visualiza√ß√£o detalhada dos bins"""
            # Dados para a visualiza√ß√£o
            bin_data = []
            items_data = []
            
            for i, bin in enumerate(solution.bins):
                bin_usage = bin.current_load
                bin_free = 1.0 - bin_usage
                
                # Adicionar bin ao dataset
                bin_data.append({
                    "Bin": f"Bin {i+1}",
                    "Utiliza√ß√£o": bin_usage * 100,
                    "Espa√ßo Livre": bin_free * 100,
                    "Itens": len(bin.items)
                })
                
                # Posi√ß√£o atual no bin (para empilhamento)
                position = 0
                
                # Adicionar cada item individualmente
                for item in sorted(bin.items, key=lambda x: x.id):
                    items_data.append({
                        "Bin": f"Bin {i+1}",
                        "Item": f"Item {item.id+1}",
                        "Tamanho": item.size,
                        "Tamanho (%)": item.size * 100,
                        "Posi√ß√£o": position,
                        "Posi√ß√£o Final": position + item.size,
                        "Color": color_palette[item.id % len(color_palette)]
                    })
                    position += item.size
            
            # Criar DataFrames
            bin_df = pd.DataFrame(bin_data)
            items_df = pd.DataFrame(items_data)
            
            return bin_df, items_df

        if uploaded_file is not None:
            strategy = st.radio("Estrat√©gia de busca local", ["Best Improvement", "First Improvement"])
            
            # Op√ß√µes avan√ßadas em um expander
            with st.expander("Op√ß√µes avan√ßadas"):
                use_sa = st.checkbox("Usar Simulated Annealing", value=True, 
                                    help="Permite aceitar solu√ß√µes piores para escapar de √≥timos locais")
                detailed_viz = st.checkbox("Visualiza√ß√£o detalhada", value=True,
                                        help="Mostra cada item com cores distintas dentro dos bins")
            
            if st.button("Executar Meta-heur√≠stica"):
                try:
                    with st.spinner("Executando meta-heur√≠stica..."):
                        # Carregar inst√¢ncia
                        items = load_instance_from_buffer(uploaded_file)
                        
                        if not items:
                            st.error("Arquivo vazio ou formato inv√°lido. Verifique se o arquivo cont√©m n√∫meros entre 0 e 1.")
                        else:
                            st.write(f"Carregados {len(items)} itens.")
                            
                            # Gerar paleta de cores para os itens
                            color_palette = generate_color_palette(len(items))
                            
                            # Configurar e executar a meta-heur√≠stica
                            improvement_strategy = "best" if strategy == "Best Improvement" else "first"
                            metaheuristic = HybridMetaheuristic(
                                time_limit_seconds=time_limit, 
                                use_sa=use_sa,
                                improvement=improvement_strategy
                            )
                            
                            best_solution, stats, history = metaheuristic.run(items, max_bins)
                            
                            # Verificar validade da solu√ß√£o
                            is_valid = best_solution.verify()
                            
                            if is_valid:
                                st.success(f"Solu√ß√£o v√°lida encontrada com {len(best_solution.bins)} bins em {stats['iterations']} itera√ß√µes!")
                                
                                # M√©tricas e estat√≠sticas
                                col1, col2, col3, col4 = st.columns(4)
                                col1.metric("Bins utilizados", f"{len(best_solution.bins)}")
                                
                                # Calcular utiliza√ß√£o m√©dia
                                bin_usages = [bin.current_load for bin in best_solution.bins]
                                avg_utilization = sum(bin_usages) / len(best_solution.bins) if best_solution.bins else 0
                                col2.metric("Utiliza√ß√£o m√©dia", f"{avg_utilization:.2%}")
                                
                                # Vari√¢ncia da utiliza√ß√£o
                                utilization_var = np.var(bin_usages) if len(best_solution.bins) > 1 else 0
                                col3.metric("Vari√¢ncia de utiliza√ß√£o", f"{utilization_var:.4f}")
                                
                                # Tempo at√© melhor solu√ß√£o
                                col4.metric("Tempo at√© melhor solu√ß√£o", f"{stats['time_to_best']:.2f}s")
                                
                                # Segunda linha de m√©tricas
                                col1, col2, col3, col4 = st.columns(4)
                                col1.metric("Perturba√ß√µes aplicadas", f"{stats['perturbations']}")
                                col2.metric("Melhorias encontradas", f"{stats['improvements']}")
                                col3.metric("Rein√≠cios executados", f"{stats['restarts']}")
                                col4.metric("Taxa de aceita√ß√£o SA", f"{stats['acceptance_rate']:.2f}%")
                                
                                # Visualiza√ß√£o detalhada dos bins
                                st.subheader("Distribui√ß√£o dos Itens nos Bins")
                                
                                if detailed_viz:
                                    # Visualiza√ß√£o detalhada com cores para cada item
                                    bin_df, items_df = create_bins_visualization(best_solution, color_palette)
                                    
                                    # Gr√°fico de barras empilhadas para visualizar itens dentro dos bins
                                    chart = alt.Chart(items_df).mark_bar().encode(
                                        x=alt.X('Bin:N', sort=None, title='Bins'),
                                        y=alt.Y('Tamanho (%):Q', title='Utiliza√ß√£o (%)'),
                                        color=alt.Color('Item:N', scale=alt.Scale(range=color_palette.copy())),
                                        tooltip=['Bin', 'Item', 'Tamanho']
                                    ).properties(
                                        width=600,
                                        height=400,
                                        title='Distribui√ß√£o dos Itens nos Bins'
                                    )
                                    
                                    # Linha indicando capacidade m√°xima
                                    capacity_line = alt.Chart(pd.DataFrame({'y': [100]})).mark_rule(
                                        color='red', strokeDash=[3, 3]
                                    ).encode(y='y')
                                    
                                    st.altair_chart(chart + capacity_line, use_container_width=True)
                                else:
                                    # Visualiza√ß√£o simplificada
                                    bin_data = []
                                    for i, bin in enumerate(best_solution.bins):
                                        bin_data.append({
                                            "Bin": f"Bin {i+1}",
                                            "Utiliza√ß√£o": bin.current_load * 100,
                                            "Itens": len(bin.items)
                                        })
                                    
                                    # DataFrame para visualiza√ß√£o
                                    bin_df = pd.DataFrame(bin_data)
                                    
                                    # Gr√°fico de barras para utiliza√ß√£o dos bins
                                    chart = alt.Chart(bin_df).mark_bar().encode(
                                        x=alt.X('Bin:N', sort=None),
                                        y=alt.Y('Utiliza√ß√£o:Q', title='Utiliza√ß√£o (%)', scale=alt.Scale(domain=[0, 100])),
                                        color=alt.Color('Utiliza√ß√£o:Q', scale=alt.Scale(scheme='viridis'), legend=None),
                                        tooltip=['Bin', 'Utiliza√ß√£o', 'Itens']
                                    ).properties(
                                        width=600,
                                        height=400,
                                        title='Utiliza√ß√£o dos Bins (%)'
                                    )
                                    
                                    st.altair_chart(chart, use_container_width=True)
                                
                                # Gr√°fico de converg√™ncia
                                st.subheader("Converg√™ncia do Algoritmo")
                                history_df = pd.DataFrame({
                                    'Itera√ß√£o': range(len(history)),
                                    'N√∫mero de Bins': history
                                })
                                
                                convergence_chart = alt.Chart(history_df).mark_line().encode(
                                    x='Itera√ß√£o:Q',
                                    y=alt.Y('N√∫mero de Bins:Q', scale=alt.Scale(zero=False)),
                                    tooltip=['Itera√ß√£o', 'N√∫mero de Bins']
                                ).properties(
                                    width=600,
                                    height=300,
                                    title='Progresso da Busca Local'
                                )
                                
                                st.altair_chart(convergence_chart, use_container_width=True)
                                
                                # Detalhes da solu√ß√£o
                                with st.expander("Ver detalhes da solu√ß√£o"):
                                    for i, bin in enumerate(best_solution.bins):
                                        st.write(f"Bin {i+1}: {len(bin.items)} itens, utiliza√ß√£o: {bin.current_load*100:.2f}%")
                                        
                                        # Criar lista de itens formatada com cores
                                        items_html = ""
                                        for item in sorted(bin.items, key=lambda x: x.id):
                                            color_hex = color_palette[item.id % len(color_palette)]
                                            items_html += f'<span style="background-color:{color_hex}; padding:2px 8px; margin:2px; border-radius:3px; display:inline-block; color:white;">Item {item.id+1} ({item.size:.2f})</span>'
                                        
                                        st.write(f"  Itens: {items_html}", unsafe_allow_html=True)
                            else:
                                # Verificar se o problema pode estar no n√∫mero m√°ximo de bins
                                total_item_size = sum(item.size for item in items)
                                min_theoretical_bins = int(total_item_size) + (1 if total_item_size % 1 > 0 else 0)
                                
                                if max_bins < min_theoretical_bins:
                                    st.error(f"A solu√ß√£o √© inv√°lida porque o n√∫mero m√°ximo de bins ({max_bins}) √© insuficiente. " 
                                            f"Baseado no tamanho total dos itens ({total_item_size:.2f}), "
                                            f"s√£o necess√°rios pelo menos {min_theoretical_bins} bins te√≥ricos. "
                                            f"Por favor, aumente o valor de 'N√∫mero m√°ximo de bins'.")
                                
                                    # Mostrar a explica√ß√£o do c√°lculo do limite inferior
                                    st.info(f"**Explica√ß√£o do limite inferior:**  \n"
                                            f"Soma dos tamanhos de todos os itens = {total_item_size:.2f}  \n"
                                            f"Como cada bin tem capacidade m√°xima 1.0, precisamos de pelo menos "
                                            f"‚åà{total_item_size:.2f}‚åâ = {min_theoretical_bins} bins.  \n"
                                            f"Note que este √© apenas um limite te√≥rico m√≠nimo. "
                                            f"Devido √† natureza combinat√≥ria do problema, a solu√ß√£o √≥tima "
                                            f"geralmente requer mais bins que este limite.")
                                else:
                                    st.error("A solu√ß√£o encontrada √© inv√°lida. Isso pode ocorrer devido a limita√ß√µes do algoritmo "
                                            "ou restri√ß√µes muito r√≠gidas. Tente aumentar o tempo limite ou o n√∫mero m√°ximo de bins.")
                except Exception as e:
                    st.error(f"Erro durante a execu√ß√£o: {str(e)}")
                    st.exception(e)  # Mostra stack trace do erro para depura√ß√£o
        else:
            st.info("Carregue um arquivo de inst√¢ncia para come√ßar.")
    
    ###################################
    # Aba PLI - Programa√ß√£o Linear Inteira    
    with tabs_main[2]:  # Aba PLI
        st.title("Programa√ß√£o Linear Inteira")
        subtabs_pli = st.tabs(["Apresenta√ß√£o", "Solu√ß√£o"])
        
        with subtabs_pli[0]:  # Sub-aba Apresenta√ß√£o
            st.header("Apresenta√ß√£o da PLI")
            st.markdown("""
            ## Programa√ß√£o Linear Inteira para o Problema de Bin Packing
            
            A Programa√ß√£o Linear Inteira (PLI) √© uma abordagem matem√°tica exata para resolu√ß√£o de problemas de otimiza√ß√£o
            como o Bin Packing. Diferentemente das heur√≠sticas, a PLI garante a obten√ß√£o da solu√ß√£o √≥tima (quando convergente),
            por√©m com maior custo computacional.
            """)
            
        with subtabs_pli[1]:  # Sub-aba Solu√ß√£o
            ilp.app()
    
    ###################################
    # Aba Sobre 
    with tabs_main[3]:  # Aba Sobre
        about.app()
    

    ###################################
    # Footer  
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **Desenvolvido por:** F√°bio Linhares  
    **Universidade:** UFAL  
    **Programa:** PPGI
    
    [Reposit√≥rio GitHub](https://github.com/fabio-linhares/occ-2024-2/tree/main/b1)
    
    **v1.0** - Abril/2025
    """)

if __name__ == "__main__":
    main()