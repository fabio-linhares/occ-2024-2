import streamlit as st
import os
from PIL import Image
import sys

# Adicionar o diret√≥rio atual ao caminho do Python para permitir importa√ß√µes relativas
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importando as p√°ginas da aplica√ß√£o
from pages import about, main_app, apresentacao

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Meta-heur√≠stica para o Problema de Bin Packing",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carregando e aplicando o CSS personalizado
def load_css(css_file):
    import os
    # Obter o caminho absoluto do diret√≥rio atual do script
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # Construir o caminho completo para o arquivo CSS
    css_path = os.path.join(dir_path, css_file)
    with open(css_path, "r") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Fun√ß√£o para carregar logos
def load_logos():
    # Obter o caminho absoluto do diret√≥rio atual do script
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # Construir o caminho completo para o diret√≥rio de logos
    logos_path = os.path.join(dir_path, "..", "data", "logos")
    
    # Dicion√°rio para armazenar logos v√°lidos
    logos_dict = {}
    
    # Verificar se o diret√≥rio existe
    if os.path.exists(logos_path):
        # Tentar carregar cada logo
        for logo_file in ["ufal.png", "ic.png", "ppgi.png"]:
            logo_path = os.path.join(logos_path, logo_file)
            if os.path.exists(logo_path):
                try:
                    logo = Image.open(logo_path)
                    # Remover a extens√£o para usar como chave
                    logo_name = os.path.splitext(logo_file)[0]
                    logos_dict[logo_name] = logo
                except Exception as e:
                    print(f"Erro ao carregar logo {logo_file}: {str(e)}")
    
    # Retorna o dicion√°rio de logos v√°lidos
    return logos_dict

def main():
    # Carregar CSS
    load_css("styles/custom.css")
    
    # Adicionar suporte para LaTeX com MathJax
    st.markdown(r"""
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    """, unsafe_allow_html=True)
    
    # Esconder as informa√ß√µes n√£o desejadas e aplicar estilos personalizados
    hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    .stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {
        font-size:16px;
    }
    /* Remove a barra horizontal no topo */
    header {
        background-color: transparent !important;
        border-bottom: none !important;
    }
    /* Ajusta o t√≠tulo para ficar mais pr√≥ximo do topo */
    .block-container {
        padding-top: 1rem !important;
    }
    /* Deixa o t√≠tulo com estilo mais destacado */
    h1:first-of-type {
        margin-top: 0 !important;
        padding-top: 0 !important;
        font-size: 2.5rem !important;
        color: var(--primary-color) !important;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
    }
    /* Ocultar seletor de tema na barra superior */
    div[data-testid="stToolbar"] button[aria-label="View theme"] {
        display: none !important;
    }
    /* Remover qualquer barra de cores no topo */
    header::before, 
    body::before,
    .main::before,
    #root::before,
    [data-testid="stAppViewContainer"]::before,
    [data-testid="stHeader"]::before {
        content: none !important;
        background: none !important;
        display: none !important;
    }
    </style>
    """
    st.markdown(hide_streamlit_style, unsafe_allow_html=True)
    
    # Sidebar
    st.sidebar.title("Navega√ß√£o")
    
    # Logos na sidebar
    logos = load_logos()
    if logos:  # Verifica se h√° logos v√°lidos antes de tentar exibi-los
        # Primeiro exibimos o logo da UFAL em tamanho completo
        if 'ufal' in logos:
            st.sidebar.image(logos['ufal'], use_container_width=True, caption=None)
        
        # Em seguida, exibimos os logos IC e PPGI lado a lado
        col1, col2 = st.sidebar.columns(2)
        if 'ic' in logos:
            col1.image(logos['ic'], use_container_width=True, caption=None)
        if 'ppgi' in logos:
            col2.image(logos['ppgi'], use_container_width=True, caption=None)
    
    # Usando abas principais em vez de radio buttons
    tabs_main = st.tabs(["Apresenta√ß√£o", "Heur√≠sticas", "PLI", "Sobre"])
    
    with tabs_main[0]:  # Aba Apresenta√ß√£o (era Introdu√ß√£o)
        apresentacao.app()
        
    with tabs_main[1]:  # Aba Heur√≠sticas
        st.title("Heur√≠sticas para Bin Packing")
        # Sub-abas dentro da aba Heur√≠sticas
        subtabs_heuristica = st.tabs(["Apresenta√ß√£o", "Solu√ß√£o"])
        
        with subtabs_heuristica[0]:  # Sub-aba Apresenta√ß√£o
            # Conte√∫do trocado: agora a sub-aba "Apresenta√ß√£o" cont√©m o conte√∫do detalhado da aplica√ß√£o
            main_app.app()  # Aplica√ß√£o principal do professor Bruno
            
        with subtabs_heuristica[1]:  # Sub-aba Solu√ß√£o
            # Conte√∫do trocado: agora a sub-aba "Solu√ß√£o" cont√©m apenas o texto introdut√≥rio
            st.header("Solu√ß√£o com Heur√≠sticas")
            st.markdown("""
            Nesta se√ß√£o s√£o apresentados os conceitos e fundamentos das heur√≠sticas
            implementadas para resolver o problema de Bin Packing.
            
            As heur√≠sticas implementadas s√£o:
            
            - **First Fit Decreasing (FFD)**: Algoritmo construtivo que ordena os itens em ordem decrescente de tamanho
              e os aloca sequencialmente no primeiro bin onde couberem.
              
            - **Busca Local**: Meta-heur√≠stica que, a partir de uma solu√ß√£o inicial, realiza movimentos no espa√ßo de
              solu√ß√µes (troca e realoca√ß√£o de itens) para encontrar solu√ß√µes melhores.
            
            Estas t√©cnicas s√£o adequadas para problemas NP-dif√≠ceis como o Bin Packing, onde m√©todos exatos
            podem ser computacionalmente invi√°veis para inst√¢ncias grandes.
            """)
    
    with tabs_main[2]:  # Aba PLI
        st.title("Programa√ß√£o Linear Inteira")
        # Sub-abas dentro da aba PLI
        subtabs_pli = st.tabs(["Apresenta√ß√£o", "Solu√ß√£o"])
        
        with subtabs_pli[0]:  # Sub-aba Apresenta√ß√£o
            st.header("Apresenta√ß√£o da PLI")
            st.markdown("""
            ## Programa√ß√£o Linear Inteira para o Problema de Bin Packing
            
            A Programa√ß√£o Linear Inteira (PLI) √© uma abordagem matem√°tica exata para resolu√ß√£o de problemas de otimiza√ß√£o
            como o Bin Packing. Diferentemente das heur√≠sticas, a PLI garante a obten√ß√£o da solu√ß√£o √≥tima (quando convergente),
            por√©m com maior custo computacional.
            """)
            
            # Cards para PLI - semelhante ao layout da p√°gina de heur√≠sticas
            col1, col2, col3, col4 = st.columns(4)
            
            # Card 1 - Modelo Matem√°tico
            with col1:
                st.markdown("""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(109, 40, 217, 0.2); text-align: center;">
                    <div style="font-size: 24px;">üìê</div>
                    <div style="font-weight: bold; margin: 10px 0;">MODELO MATEM√ÅTICO</div>
                    <div style="font-size: 18px; font-weight: bold;">Exato</div>
                    <div style="font-size: 12px; opacity: 0.7;">Formula√ß√£o rigorosa do problema</div>
                </div>
                """, unsafe_allow_html=True)
            
            # Card 2 - Solvers
            with col2:
                st.markdown("""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(16, 185, 129, 0.2); text-align: center;">
                    <div style="font-size: 24px;">üßÆ</div>
                    <div style="font-weight: bold; margin: 10px 0;">SOLVERS</div>
                    <div style="font-size: 18px; font-weight: bold;">CPLEX/Gurobi</div>
                    <div style="font-size: 12px; opacity: 0.7;">Ferramentas avan√ßadas de otimiza√ß√£o</div>
                </div>
                """, unsafe_allow_html=True)
            
            # Card 3 - Garantias
            with col3:
                st.markdown("""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(59, 130, 246, 0.2); text-align: center;">
                    <div style="font-size: 24px;">‚úì</div>
                    <div style="font-weight: bold; margin: 10px 0;">GARANTIAS</div>
                    <div style="font-size: 18px; font-weight: bold;">Otimalidade</div>
                    <div style="font-size: 12px; opacity: 0.7;">Solu√ß√£o comprovadamente √≥tima</div>
                </div>
                """, unsafe_allow_html=True)
            
            # Card 4 - Limita√ß√µes
            with col4:
                st.markdown("""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(245, 158, 11, 0.2); text-align: center;">
                    <div style="font-size: 24px;">‚ö†Ô∏è</div>
                    <div style="font-weight: bold; margin: 10px 0;">LIMITA√á√ïES</div>
                    <div style="font-size: 18px; font-weight: bold;">Escalabilidade</div>
                    <div style="font-size: 12px; opacity: 0.7;">Desafios com inst√¢ncias grandes</div>
                </div>
                """, unsafe_allow_html=True)
            
            # Descri√ß√£o da abordagem de PLI
            st.markdown("""
            ### Formula√ß√£o Matem√°tica
            
            O problema de Bin Packing pode ser formulado como um problema de PLI da seguinte forma:
            """)
            
            # Layout aprimorado para √≠ndices e conjuntos
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(r"""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(109, 40, 217, 0.2);">
                    <h4 style="font-weight: bold; margin-top: 0;">√çndices e Conjuntos:</h4>
                    <ul style="margin-bottom: 0;">
                        <li>$i \in I$: conjunto de itens</li>
                        <li>$j \in J$: conjunto de bins (no pior caso, um bin para cada item)</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown("""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(59, 130, 246, 0.2);">
                    <h4 style="font-weight: bold; margin-top: 0;">Par√¢metros:</h4>
                    <ul style="margin-bottom: 0;">
                        <li>$w_i$: tamanho (peso) do item $i$</li>
                        <li>$C$: capacidade de cada bin</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            
            # Vari√°veis de decis√£o em destaque
            st.markdown("""
            <div style="border-radius: 10px; padding: 15px; background-color: rgba(16, 185, 129, 0.2); margin-top: 15px;">
                <h4 style="font-weight: bold; margin-top: 0;">Vari√°veis de Decis√£o:</h4>
                <ul style="margin-bottom: 0;">
                    <li>$y_j$: 1 se o bin $j$ √© utilizado, 0 caso contr√°rio</li>
                    <li>$x_{ij}$: 1 se o item $i$ √© alocado ao bin $j$, 0 caso contr√°rio</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
            # Fun√ß√£o objetivo com destaque
            st.markdown(r"""
            <div style="border-radius: 10px; padding: 15px; background-color: rgba(245, 158, 11, 0.2); margin-top: 15px;">
                <h4 style="font-weight: bold; margin-top: 0;">Fun√ß√£o Objetivo:</h4>
                <div style="text-align: center; font-size: 1.2em; padding: 10px;">
                    $\min \displaystyle\sum_{j \in J} y_j$
                </div>
                <p style="margin-bottom: 0; font-style: italic; text-align: center;">Minimizar o n√∫mero de bins utilizados</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Restri√ß√µes com formata√ß√£o melhorada
            st.markdown(r"""
            <div style="border-radius: 10px; padding: 15px; background-color: rgba(239, 68, 68, 0.2); margin-top: 15px;">
                <h4 style="font-weight: bold; margin-top: 0;">Restri√ß√µes:</h4>
                <ol>
                    <li>
                        <strong>Cada item deve ser atribu√≠do a exatamente um bin:</strong>
                        <div style="text-align: center; padding: 10px;">
                            $\displaystyle\sum_{j \in J} x_{ij} = 1, \quad \forall i \in I$
                        </div>
                    </li>
                    <li>
                        <strong>A capacidade de cada bin n√£o pode ser excedida:</strong>
                        <div style="text-align: center; padding: 10px;">
                            $\displaystyle\sum_{i \in I} w_i \cdot x_{ij} \leq C \cdot y_j, \quad \forall j \in J$
                        </div>
                    </li>
                    <li>
                        <strong>Restri√ß√µes de integralidade:</strong>
                        <div style="text-align: center; padding: 10px;">
                            $x_{ij} \in \{0,1\}, \quad \forall i \in I, j \in J \quad \text{e} \quad y_j \in \{0,1\}, \quad \forall j \in J$
                        </div>
                    </li>
                </ol>
            </div>
            """, unsafe_allow_html=True)
            
            # Comparativo entre Heur√≠sticas e PLI
            st.markdown("""
            ### Compara√ß√£o: Heur√≠sticas vs. PLI
            """)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(16, 185, 129, 0.2);">
                    <h4 style="text-align: center; margin-bottom: 10px;">Vantagens da PLI</h4>
                    <ul>
                        <li><strong>Solu√ß√£o √ìtima:</strong> Garante a obten√ß√£o da solu√ß√£o √≥tima quando converge</li>
                        <li><strong>Limites (Bounds):</strong> Fornece limites inferiores para o problema</li>
                        <li><strong>Flexibilidade:</strong> Facilidade para adicionar novas restri√ß√µes</li>
                        <li><strong>Certificados:</strong> Fornece provas de otimalidade ou inviabilidade</li>
                        <li><strong>Robustez:</strong> Comportamento previs√≠vel com diferentes inst√¢ncias</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown("""
                <div style="border-radius: 10px; padding: 15px; background-color: rgba(245, 158, 11, 0.2);">
                    <h4 style="text-align: center; margin-bottom: 10px;">Desafios da PLI</h4>
                    <ul>
                        <li><strong>Complexidade Computacional:</strong> Tempo exponencial no pior caso</li>
                        <li><strong>Recursos:</strong> Maior consumo de mem√≥ria e processamento</li>
                        <li><strong>Escalabilidade:</strong> Dificuldades com inst√¢ncias grandes</li>
                        <li><strong>Aplicabilidade:</strong> Pode ser impratic√°vel em cen√°rios de tempo real</li>
                        <li><strong>Depend√™ncia:</strong> Requer bibliotecas especializadas como CPLEX ou Gurobi</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
            
            # Implementa√ß√£o em Python com CPLEX
            st.markdown("""
            ### Implementa√ß√£o com CPLEX
            
            Abaixo est√° um exemplo de implementa√ß√£o do problema de Bin Packing usando a biblioteca CPLEX em Python:
            """)
            
            st.code("""
from docplex.mp.model import Model

def bin_packing_cplex(item_weights, bin_capacity):
    n = len(item_weights)      # N√∫mero de itens
    m = n                      # N√∫mero m√°ximo de bins (pior caso)
    
    # Criar modelo
    model = Model("BinPacking")
    
    # Vari√°veis de decis√£o
    x = {}  # x[i,j] = 1 se o item i for atribu√≠do ao bin j
    for i in range(n):
        for j in range(m):
            x[i,j] = model.binary_var(name=f"x_{i}_{j}")
    
    y = {}  # y[j] = 1 se o bin j for utilizado
    for j in range(m):
        y[j] = model.binary_var(name=f"y_{j}")
    
    # Fun√ß√£o objetivo: minimizar o n√∫mero de bins utilizados
    model.minimize(model.sum(y[j] for j in range(m)))
    
    # Restri√ß√£o: cada item deve ser atribu√≠do a exatamente um bin
    for i in range(n):
        model.add_constraint(
            model.sum(x[i,j] for j in range(m)) == 1,
            ctname=f"item_{i}_assignment"
        )
    
    # Restri√ß√£o: a capacidade de cada bin n√£o pode ser excedida
    for j in range(m):
        model.add_constraint(
            model.sum(item_weights[i] * x[i,j] for i in range(n)) <= bin_capacity * y[j],
            ctname=f"bin_{j}_capacity"
        )
    
    # Resolver o modelo
    solution = model.solve(log_output=True)
    
    if solution:
        # Extrair solu√ß√£o
        bins_used = []
        for j in range(m):
            if solution.get_value(y[j]) > 0.5:  # y[j] = 1
                bin_items = []
                for i in range(n):
                    if solution.get_value(x[i,j]) > 0.5:  # x[i,j] = 1
                        bin_items.append((i, item_weights[i]))
                bins_used.append(bin_items)
        
        return {
            "status": "optimal",
            "num_bins": len(bins_used),
            "bins": bins_used,
            "objective_value": solution.get_objective_value()
        }
    else:
        return {"status": "infeasible"}
            """, language="python")
            
        with subtabs_pli[1]:  # Sub-aba Solu√ß√£o
            st.header("Solu√ß√£o com PLI")
            st.markdown("""
            ## Solu√ß√£o para o Professor Rian
            
            Esta se√ß√£o cont√©m a implementa√ß√£o da meta-heur√≠stica para o problema de Bin Packing
            para a disciplina de Otimiza√ß√£o Combinat√≥ria Computacional.
            
            *Conte√∫do em desenvolvimento.*
            """)
    
    with tabs_main[3]:  # Aba Sobre
        about.app()
    
    # Informa√ß√µes no rodap√© da sidebar
    st.sidebar.markdown("---")
    st.sidebar.info("""
    **Desenvolvido por:** F√°bio Linhares  
    **Universidade:** UFAL  
    **Programa:** PPGI
    
    [Reposit√≥rio GitHub](https://github.com/fabio-linhares/occ-2024-2/tree/main/b1)
    
    **v1.0** - Abril/2025
    """)

# Executar a aplica√ß√£o
if __name__ == "__main__":
    main()